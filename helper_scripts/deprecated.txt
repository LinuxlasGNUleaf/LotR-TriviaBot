
def feature_allowed(feature, channel, settings, config):
    '''
    checks the settings whether the feature is allowed in this channel
    '''
    if isinstance(channel, discord.channel.DMChannel):
        return 1
    server = channel.guild
    if channel.id in settings.keys():
        if feature in settings[channel.id]:
            return settings[channel.id][feature]
    if server.id in settings.keys():
        if feature in settings[server.id]:
            return settings[server.id][feature]
    if feature in config['discord']['settings']['defaults'].keys():
        return config['discord']['settings']['defaults'][feature]
    return 1


async def edit_settings(cmd, settings, channel):
    '''
    edits the settings for the server or channel based on the given command
    '''
    if len(cmd) == 1:
        await channel.send('You have to provide a state! Valid states are:\n `on`, `off`, `unset`, `server-on`, `server-off`, `server-unset`')

    elif len(cmd) != 2:
        await channel.send('You provided too much arguments! You can only provide one of the following states:\n`on`, `off`, `unset`, `server-on`, `server-off`, `server-unset`')

    elif cmd[1] == 'on' or cmd[1] == 'off' or cmd[1] == 'unset':
        channel_id = channel.id
        if not channel_id in settings.keys():
            settings[channel_id] = {}

        if cmd[1] == 'on':
            settings[channel_id][cmd[0]] = 1
            await channel.send('feature `{}` for this channel was turned **on**'.format(cmd[0]))
        elif cmd[1] == 'off':
            settings[channel_id][cmd[0]] = 0
            await channel.send('feature `{}` for this channel was turned **off**'.format(cmd[0]))
        elif cmd[1] == 'unset':
            if cmd[0] in settings[channel_id].keys():
                del settings[channel_id][cmd[0]]
                await channel.send('feature `{}` for this channel was **unset**'.format(cmd[0]))
            else:
                await channel.send('feature `{}` for this channel was not yet set'.format(cmd[0]))

    elif cmd[1] == 'server-on' or cmd[1] == 'server-off' or cmd[1] == 'server-unset':
        server = channel.guild.id
        if not server in settings.keys():
            settings[server] = {}

        if cmd[1] == 'server-on':
            settings[server][cmd[0]] = 1
            await channel.send('feature `{}` for this server was turned **on**'.format(cmd[0]))
        elif cmd[1] == 'server-off':
            settings[server][cmd[0]] = 0
            await channel.send('feature `{}` for this server was turned **off**'.format(cmd[0]))
        elif cmd[1] == 'server-unset':
            if cmd[0] in settings[server].keys():
                del settings[server][cmd[0]]
                await channel.send('feature `{}` for this server was **unset**'.format(cmd[0]))
            await channel.send('feature `{}` for this server was not yet set'.format(cmd[0]))

    else:
        await channel.send('state `{}` not recognized'.format(cmd[1]))

async def manage_config(channel, user, content, config, settings):
    '''
    manages the settings for this channel/server
    '''
    content = content.split(' ')[2:]
    server = channel.guild

    for i, item in enumerate(content):
        content[i] = item.strip()

    # user wants to change the settings
    if not content:
        await channel.send(':x: Use one of the following commands:')
        await channel.send(config['discord']['settings']['help'].format(config['general']['key']))
        return
    if content[0] in config['discord']['settings']['features']:
        if channel.permissions_for(user).manage_channels or \
            user.id in config['general']['superusers']:
            if user.id in config['general']['superusers']:
                await channel.send(':desktop: Superuser detected, overriding permissions...')
            await edit_settings(content, settings, channel)
        else:
            await channel.send(':x: You do not have permission to change these settings!')

    # user wants to see the help message
    elif content[0] == 'help':
        await channel.send(config['discord']['settings']['help'].format(config['general']['key']))

    # user wants to see the config embed
    elif content[0] == 'show':
        title = 'Config for #{}, Server: {}'.format(channel, server)
        content = ''
        for feature in config['discord']['settings']['features']:
            content += '**Feature `{}`:**\n'.format(feature)

            server_setting = ':grey_question:'
            if server.id in settings.keys():
                if feature in settings[server.id]:
                    server_setting = ':white_check_mark:' if settings[server.id][feature] else ':x:'

            channel_setting = ':grey_question:'
            if channel.id in settings.keys():
                if feature in settings[channel.id]:
                    channel_setting = ':white_check_mark:' if settings[channel.id][feature] else ':x:'

            effective = ':white_check_mark:' if feature_allowed(feature,
                                                                channel,
                                                                settings,
                                                                config) else ':x:'
            content += 'Server: {} Channel: {} Effective: {}\n\n'\
                    .format(server_setting, channel_setting, effective)

        embed = cogs._dcutils.create_embed(title=title, content=content)
        await channel.send(embed=embed)
    else:
        await channel.send('Unknown Feature `{}`! Try one of the following:\n`'.format(content[0])+'`, `'
                           .join(config['discord']['settings']['features']+['help', 'show'])+'`')
